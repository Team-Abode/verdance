plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

version = project.minecraft_version + "-" + project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "Forge Maven"
		url = 'https://maven.minecraftforge.net/'
	}
	maven {
		url = 'https://jitpack.io'
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()

	// Fabric
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Sketch
	modApi "com.github.Team-Abode:sketch:${rootProject.scribe_version}"

	// Terrablender
	modApi "com.github.glitchfiend:TerraBlender-fabric:${rootProject.minecraft_version}-${rootProject.terrablender_version}"

	/*
	// Farmer's Delight
	modImplementation "maven.modrinth:farmers-delight-fabric:${project.farmersdelight_version}"
	// Every Compat
	modRuntimeOnly "maven.modrinth:every-compat:${rootProject.everycompat_version}"
	// Moonlight
	modRuntimeOnly "maven.modrinth:moonlight:${rootProject.moonlight_version}"
	// Twigs
	modRuntimeOnly "maven.modrinth:twigs:${rootProject.twigs_version}"
	*/
}

base {
	archivesName = project.archives_base_name
}

loom {
	runs {
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${project.mod_id}"

			runDir "build/datagen"
		}
	}

	accessWidenerPath = file("src/main/resources/verdance.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {

	}
}
